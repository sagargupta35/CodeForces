import java.io.*;
import java.util.*;

public class CodeChef3 {

    public static void main(String[] args) throws IOException {
        int t = in.nextInt();
        while (t-- > 0) {
            int n = in.nextInt();
            int m = in.nextInt();
            int q = in.nextInt();
            int[] arr = ai(n);
            Arrays.setAll(arr, i -> arr[i]-1);
            int[] b = ai(m);
            Arrays.setAll(b, i -> b[i]-1);
            NavigableSet<Integer> [] f = new TreeSet [n];
            Arrays.setAll(f,i -> new TreeSet<>());
            for (int i = 0; i < m; i++) {
                f[b[i]].add(i);
            }
            Node root = new Node(0, n-1);
            build(root, arr, f);
            if(root.sorted){
                System.out.println("YA");
            } else System.out.println("TIDAK");
            Map<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < n; i++) {
                map.put(arr[i], i);
            }
            while (q-- > 0){
                int idx = in.nextInt()-1;
                int val = in.nextInt()-1;

                // remove previous value
                f[b[idx]].remove(idx);
                Integer m1 = null;
                if(!f[b[idx]].isEmpty()){
                    m1 = f[b[idx]].first();
                }
                if(m1 == null) m1 = Integer.MAX_VALUE;
                int i1 = map.get(b[idx]);
                update(root, i1, m1);

                // put new value
                f[val].add(idx);
                b[idx] = val;
                m1 = f[val].first();
                int i2 = map.get(val);
                update(root, i2, m1);

                if(root.sorted){
                    System.out.println("YA");
                } else System.out.println("TIDAK");
            }
        }
    }

   static class Node{
        int l, r;
        int max, min;
        boolean sorted;
        Node left;
        Node right;

       public Node(int l, int r) {
           this.l = l;
           this.r = r;
           left = null;
           right = null;
       }
   }

   static void build(Node node, int [] arr, NavigableSet<Integer> [] f){
        int l = node.l;
        int r = node.r;
        if(l == r){
            Integer min = null;
            if(!f[arr[l]].isEmpty()){
                min = f[arr[l]].first();
            }
            if(min == null) min = Integer.MAX_VALUE;
            node.min = min;
            node.max = min;
            node.sorted = true;
            return;
        }
        int mid = l + (r - l)/2;
        node.left = new Node(l, mid);
        build(node.left, arr, f);
        if(mid < r){
            node.right = new Node(mid+1, r);
            build(node.right, arr, f);
        }
        int min = node.left.min;
        int max = node.left.max;
        boolean flag = node.left.sorted;
        if(node.right != null){
            min = Math.min(min, node.right.min);
            max = Math.max(max, node.right.max);
            flag &= node.right.sorted;
            flag &= node.left.max <= node.right.min;
        }
        node.min = min;
        node.max = max;
        node.sorted = flag;
   }

   static void update(Node node, int idx, int val){
        if(node.l > idx || node.r < idx) return;
        if(node.l == node.r){
            node.min = val;
            node.max = val;
            return;
        }
        update(node.left, idx, val);
        int min = node.left.min;
        int max = node.left.max;
        boolean flag = node.left.sorted;
        if(node.right != null){
            update(node.right, idx, val);
            min = Math.min(min, node.right.min);
            max = Math.max(max, node.right.max);
            flag &= node.right.sorted;
            flag &= node.left.max <= node.right.min;
        }
        node.min = min;
        node.max = max;
        node.sorted = flag;
   }

    static class Triplet{
        int a, b, c;

        public Triplet(int a, int b, int c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }

        @Override
        public String toString() {
            return a + " " + b + " " + c;
        }
    }

    static class FastWriter {
        private final BufferedWriter bw;

        public FastWriter() {
            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));
        }

        public void print(Object object) throws IOException {
            bw.append("").append(String.valueOf(object));
        }

        public void println(Object object) throws IOException {
            print(object);
            bw.append("\n");
        }

        public void close() throws IOException {
            bw.close();
        }
    }

    static class Pair<T, U> {
        T f;
        U s;

        public Pair(T first, U sec) {
            this.f = first;
            this.s = sec;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Pair<?, ?> pair = (Pair<?, ?>) obj;
            return Objects.equals(f, pair.f) && Objects.equals(s, pair.s);
        }

        @Override
        public int hashCode() {
            return Objects.hash(f, s);
        }

        @Override
        public String toString() {
            return f + " " + s;
        }
    }

    static int mod = 998244353;

    static int [] ai(int n){
        int [] arr = new int [n];
        for(int i = 0; i<n; i++) arr[i] = in.nextInt();
        return arr;
    }


    static void reverse(int [] arr, int i, int j){
        while (i <= j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++; j--;
        }
    }

    static long[] al(int n) {
        long[] arr = new long[n];
        for (int i = 0; i < n; i++) arr[i] = in.nextLong();
        return arr;
    }

    static FastReader in = new FastReader();

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine().trim();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}
